"use strict";
var feedparser_1 = require("feedparser");
var iconv_1 = require("iconv");
var zlib_1 = require("zlib");
function Fetch(feed) {
    var req = request(feed, { timeout: 10000, pool: false });
    req.setMaxListeners(50);
    req.setHeader('user-agent', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36');
    req.setHeader('accept', 'text/html,application/xhtml+xml');
    var feedparser = new feedparser_1.default();
    req.on('error', done);
    req.on('response', function (res) {
        if (res.statusCode !== 200) {
            return this.emit('error', new Error('Bad status code'));
        }
        var encoding = res.headers['content-encoding'] || 'identity', charset = getParams(res.headers['content-type'] || '').charset;
        res = maybeDecompress(res, encoding);
        res = maybeTranslate(res, charset);
        res.pipe(feedparser);
    });
    feedparser.on('error', done);
    feedparser.on('end', done);
    feedparser.on('readable', function () {
        var post;
        while (post = this.read()) {
            console.log(post);
        }
    });
}
exports.Fetch = Fetch;
function maybeDecompress(res, encoding) {
    var decompress;
    if (encoding.match(/\bdeflate\b/)) {
        decompress = zlib_1.default.createInflate();
    }
    else if (encoding.match(/\bgzip\b/)) {
        decompress = zlib_1.default.createGunzip();
    }
    return decompress ? res.pipe(decompress) : res;
}
function maybeTranslate(res, charset) {
    var iconv;
    if (!iconv && charset && !/utf-*8/i.test(charset)) {
        try {
            iconv = new iconv_1.Iconv(charset, 'utf-8');
            console.log('Converting from charset %s to utf-8', charset);
            iconv.on('error', done);
            res = res.pipe(iconv);
        }
        catch (err) {
            res.emit('error', err);
        }
    }
    return res;
}
function getParams(str) {
    var params = str.split(';').reduce(function (params, param) {
        var parts = param.split('=').map(function (part) { return part.trim(); });
        if (parts.length === 2) {
            params[parts[0]] = parts[1];
        }
        return params;
    }, {});
    return params;
}
function done(err) {
    if (err) {
        console.log(err, err.stack);
        return process.exit(1);
    }
    process.exit();
}
